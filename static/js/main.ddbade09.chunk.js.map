{"version":3,"sources":["logo.svg","utils/API.js","components/navbar.js","components/searchbar.js","components/tableResults.js","components/tableSortBar.js","components/wrapper.js","directory/dirContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Promise","resolve","reject","axios","get","then","res","results","data","map","employee","first","name","last","image","picture","email","phone","ID","uuid","catch","err","Navbar","className","Searchbar","props","onSubmit","ignoreSubmit","value","search","onChange","handleInputChange","type","placeholder","TableResults","src","medium","alt","href","id","TableSortBar","scope","onClick","sortTable","Wrapper","children","DirContainer","state","employees","sort","filtered","setEmployees","a","API","setState","console","log","event","preventDefault","target","toLowerCase","set","criteria","searchResults","filter","startsWith","sortBy","compare","b","employeeA","toUpperCase","employeeB","comparison","sortedUsers","this","Component","App","exact","path","process","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ddbade09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\nimport uuid from \"react-uuid\";\n\nexport default {\n    getEmployees: function () {\n        return new Promise((resolve, reject) => {\n            axios\n                .get(\"https://randomuser.me/api/?results=100&nat=us\")\n                .then(res => {\n                    const employees = res.data.results;\n                    const results = employees.map(employee => {\n                        return {\n                            first: employee.name.first,\n                            last: employee.name.last,\n                            image: employee.picture,\n                            email: employee.email,\n                            phone: employee.phone,\n                            ID: uuid()\n                        }\n                    })\n                    resolve(results)\n                })\n                .catch(err => reject(err))\n        })\n    }\n};","import React from \"react\";\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-warning bg-warning\">\n            <h1 className=\"header\">Employee Directory</h1>\n        </nav>\n    );\n}\nexport default Navbar;","import React from \"react\";\n\nfunction Searchbar(props) {\n    return (\n        <div className=\"searchbar\">\n            <form onSubmit={props.ignoreSubmit} className=\"form-inline\">\n                <input\n                value={props.search}\n                onChange={props.handleInputChange}\n                className=\"form-control\"\n                type=\"text\"\n                placeholder=\"Search by name\"\n                />\n            </form>\n        </div>\n    )\n}\nexport default Searchbar;","import React from \"react\";\n\nfunction TableResults(props) {\n    return (\n        <tbody>\n            {props.results.map(employee => (\n                <tr>\n                    <td> <img src={employee.image.medium} alt={employee.name}></img></td>\n                    <td>{employee.first}</td>\n                    <td>{employee.last}</td>\n                    <td><a href={employee.email}>{employee.email}</a></td>\n                    <td>{employee.phone}</td>\n                    <td>{employee.id}</td>\n                </tr>\n            ))}\n        </tbody>\n    );\n}\n\nexport default TableResults;","import React from \"react\";\nimport \"../App.css\";\n\nconst TableSortBar = (props) => {\n    return (\n        <thead>\n            <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\"> <a href=\"#name\" className=\"sortBtn\" onClick={() => props.sortTable(\"first\")}>First Name</a> </th>\n                <th scope=\"col\"> <a href=\"#name\" className=\"sortBtn\" onClick={() => props.sortTable(\"last\")}>Last Name</a> </th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Phone</th>\n                <th scope=\"col\">ID</th>\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableSortBar;","import React from \"react\";\n\nfunction Wrapper({ children }) {\n    return (\n        <div className=\"wrapper card\">\n            <div className=\"card-body\">\n                {children}\n            </div>\n        </div>\n    );\n}\n\nexport default Wrapper;","import React, { Component } from \"react\";\n\nimport API from \"../utils/API\";\nimport \"../App.css\";\nimport Navbar from \"../components/navbar\";\nimport Searchbar from \"../components/searchbar\";\nimport TableResults from \"../components/tableResults\";\nimport TableSortBar from \"../components/tableSortBar\";\nimport Wrapper from \"../components/wrapper\";\n\nclass DirContainer extends Component {\n    state = {\n        employees: [],\n        search: \"\",\n        sort: true,\n        filtered: [],\n    };\n    componentDidMount() {\n        this.setEmployees()\n    }\n\n    setEmployees = async () => {\n        await API.getEmployees()\n            .then(employees => {\n                this.setState({ employees, filtered: employees })\n            })\n            .catch(err => console.log(err));\n        console.log(this.state.employees)\n    }\n\n    handleInputChange = event => {\n        event.preventDefault();\n        this.setState({ search: event.target.value.toLowerCase() }, (set) => {\n            let criteria = this.state.search\n            let searchResults = this.state.employees.filter(employee => employee.first.toLowerCase().startsWith(criteria) || employee.last.toLowerCase().startsWith(criteria))\n            return this.setState({ filtered: searchResults })\n        });\n    };\n\n    ignoreSubmit = event => {\n        event.preventDefault();\n        return\n    }\n\n    sortTable = async (sortBy) => {\n        const criteria = sortBy\n\n        const compare = (a, b) => {\n            const employeeA = a[criteria].toUpperCase();\n            const employeeB = b[criteria].toUpperCase();\n            let comparison = 0;\n\n            if (this.state.sort) {\n                if (employeeA > employeeB) {\n                    comparison = 1;\n                } else if (employeeA < employeeB) {\n                    comparison = -1;\n                }\n                return comparison;    \n            }   else {\n                    if (employeeA > employeeB) {\n                        comparison = -1;\n                    } else if (employeeA < employeeB) {\n                        comparison = 1;\n                    }\n                    return comparison;\n                }\n        }\n        const sortedUsers = this.state.filtered.sort(compare);\n        this.setState({ sort: !this.state.sort, filtered: sortedUsers })\n    }\n    render() {\n        return (\n            <Wrapper>\n                <Navbar />\n                <Searchbar handleInputChange={this.handleInputChange} ignoreSubmit={this.ignoreSubmit} />\n                <table className=\"table table-striped table-hover table-condensed mt-4\">\n                    <TableSortBar sortTable={this.sortTable} />\n                    <TableResults results={this.state.filtered} />\n                </table>\n            </Wrapper>\n        )\n    }\n}\n\nexport default DirContainer;\n\n\n","import React from \"react\";\nimport DirContainer from \"./directory/dirContainer\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route\n          exact\n          path={`${process.env.PUBLIC_URL}/`}\n          component={DirContainer}\n        />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}